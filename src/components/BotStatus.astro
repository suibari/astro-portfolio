---
import StatusPanel from './StatusPanel.astro';
import ChartPanel from './ChartPanel.astro';
import MoodPanel from './MoodPanel.astro';
import TopPostPanel from './TopPostPanel.astro';
---

<div class="bg-white rounded-lg">
  <h2 class="text-2xl font-bold mb-4 flex items-center">
    üíñ Bot„Åü„Çì„ÅÆ„Åç„ÇÇ„Å° („É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞)
  </h2>
  <p class="text-gray-600 mb-4"><strong>ÁèæÂú®ÊôÇÂàª(JST):</strong> <span id="jst-time">--:--:--</span></p>

  <div class="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
    <StatusPanel title="ÂÖÉÊ∞ó" value="---" id="energy" />
    <StatusPanel title="Â¢ó„Åà„Åü„Éï„Ç©„É≠„ÉØ„Éº" value="---" id="followers" />
    <StatusPanel title="„ÅÑ„ÅÑ„Å≠„Åï„Çå„ÅüÂõûÊï∞" value="---" id="likes" />
    <StatusPanel title="„ÅÑ„ÅÑ„Å≠„Åï„ÇåÈÄüÂ∫¶ (ÊØéÂàÜ)" value="---" id="likes-speed" />
    <StatusPanel title="ÂÖ®ËÇØÂÆö„Åó„ÅüÂõûÊï∞" value="---" id="affirmationCount" />
    <StatusPanel title="ÂÖ®ËÇØÂÆöÈÄüÂ∫¶ (ÊØéÂàÜ)" value="---" id="affirmation-speed" />
    <StatusPanel title="ÂÖ®ËÇØÂÆö„Åó„Åü‰∫∫Êï∞" value="---" id="uniqueAffirmationUserCount" />
    <StatusPanel title="Âç†„Å£„ÅüÂõûÊï∞" value="---" id="fortune" />
    <StatusPanel title="ÂøúÊè¥„Åó„ÅüÂõûÊï∞" value="---" id="cheer" />
    <StatusPanel title="ÂàÜÊûê„Åó„ÅüÂõûÊï∞" value="---" id="analysis" />
    <StatusPanel title="DJ„Åó„ÅüÂõûÊï∞" value="---" id="dj" />
    <StatusPanel title="Ë®òÂøµÊó•„ÅäÁ•ù„ÅÑÂõûÊï∞" value="---" id="anniversary" />
    <StatusPanel title="Ë≥™Âïè„Ç≥„Éº„Éä„ÉºÂõûÁ≠îÊï∞" value="---" id="answer" />
    <StatusPanel title="Rate Limit Point (ÊØéÊôÇ)" value="---" id="bskyrate-hourly" />
    <StatusPanel title="AI RequestÊï∞" value="---" id="rpd" />
  </div>

  <div class="flex flex-col md:flex-row gap-4 mb-4">
    <ChartPanel title="„Éï„Ç©„É≠„ÉØ„ÉºÊé®Áßª" canvasId="follower-chart" />
    <ChartPanel title="„Éï„Ç©„É≠„ÉØ„Éº„ÅÆ‰ΩøÁî®Ë®ÄË™û" canvasId="lang-chart" />
  </div>

  <MoodPanel title="‰ªä„ÅÆÊ∞óÂàÜ" value="---" id="mood" />
  <TopPostPanel title="„ÅÑ„Å°„Åä„Åó„Éù„Çπ„Éà" />
  <StatusPanel title="bot„Åü„Çì„ÅÆ„Ç≥„É°„É≥„Éà:" value="---" id="daily-comment" />
</div>

<script>
  import { AtpAgent } from '@atproto/api';
  import Chart from 'chart.js/auto'; // Chart.js„Çí„Ç§„É≥„Éù„Éº„Éà
  import 'chartjs-adapter-date-fns'; // date-fns„Ç¢„ÉÄ„Éó„Çø„Éº„Çí„Ç§„É≥„Éù„Éº„Éà
  import { fetchFollowerData } from '../services/bottan/fetchFollowerData'; // „Éï„Ç©„É≠„ÉØ„Éº„Éá„Éº„ÇøÂèñÂæóÈñ¢Êï∞„Çí„Ç§„É≥„Éù„Éº„Éà
  
  // Ë™çË®º‰∏çË¶Å„ÅÆÂÖ¨ÈñãAPI„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÇíÊåáÂÆö
  const agent = new AtpAgent({ service: 'https://public.api.bsky.app' });

  let langChart: Chart | null = null; // Chart„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰øùÊåÅ„Åô„ÇãÂ§âÊï∞
  let followerChart: Chart | null = null; // „Éï„Ç©„É≠„ÉØ„ÉºÊé®Áßª„Ç∞„É©„Éï„ÅÆChart„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰øùÊåÅ„Åô„ÇãÂ§âÊï∞
  
  const socket = new WebSocket(`wss://bot-tan.suibari.com/ws`);

  // „Éï„Ç©„É≠„ÉØ„ÉºÊé®Áßª„Ç∞„É©„Éï„ÅÆÂàùÊúüÂåñ„Å®Êõ¥Êñ∞
  async function initFollowerChart() {
    const followerData = await fetchFollowerData();
    const followerChartEl = document.getElementById('follower-chart') as HTMLCanvasElement;

    if (followerData && followerChartEl) {
      // date-fns„Ç¢„ÉÄ„Éó„Çø„Éº„Çí‰ΩøÁî®„Åô„Çã„Åü„ÇÅ„ÄÅÊó•‰ªòÊñáÂ≠óÂàó„ÇíÁõ¥Êé•Ê∏°„Åô
      const labels = followerData.map((item: { date: string; count: number }) => item.date);
      const counts = followerData.map((item: { date: string; count: number }) => item.count);

      if (followerChart) {
        followerChart.data.labels = labels;
        followerChart.data.datasets[0].data = counts;
        followerChart.update();
      } else {
        followerChart = new Chart(followerChartEl, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [{
              label: '„Éï„Ç©„É≠„ÉØ„ÉºÊï∞',
              data: counts,
              borderColor: 'rgb(75, 192, 192)',
              tension: 0.1,
              fill: false
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: 'top',
              },
              title: {
                display: false,
                text: '„Éï„Ç©„É≠„ÉØ„ÉºÊé®Áßª'
              }
            },
            scales: {
              x: {
                type: 'time', // ÊôÇÈñìËª∏„Å´Â§âÊõ¥
                time: {
                  unit: 'hour', // ÊôÇÈñìÂçò‰Ωç„ÇíÊôÇÈñì„Å´„Åô„Çã
                  tooltipFormat: 'yyyy/MM/dd HH:mm', // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó„ÅÆË°®Á§∫ÂΩ¢Âºè
                  displayFormats: {
                    hour: 'HH:mm', // Ëª∏„ÅÆË°®Á§∫ÂΩ¢Âºè„ÇíÊôÇÈñì„ÅÆ„Åø„Å´
                    day: 'MM/dd' // Êó•‰ªò„ÅÆË°®Á§∫ÂΩ¢Âºè„ÇÇËøΩÂä†
                  }
                },
                title: {
                  display: true,
                  text: 'Êó•ÊôÇ' // Ëª∏„ÅÆ„Çø„Ç§„Éà„É´„Çí„ÄåÊó•ÊôÇ„Äç„Å´Â§âÊõ¥
                }
              },
              y: {
                title: {
                  display: true,
                  text: '„Éï„Ç©„É≠„ÉØ„ÉºÊï∞'
                }
              }
            }
          }
        });
      }
    }
  }

  // „Éö„Éº„Ç∏„É≠„Éº„ÉâÊôÇ„Å´„Éï„Ç©„É≠„ÉØ„ÉºÊé®Áßª„Ç∞„É©„Éï„ÇíÂàùÊúüÂåñ
  initFollowerChart();

  socket.onmessage = async (event) => {
    const data = JSON.parse(event.data);
    console.log('Received data:', data); // „Éá„Éº„ÇøÊßãÈÄ†„ÇíÁ¢∫Ë™ç„Åô„Çã„Åü„ÇÅ„Å´„É≠„Ç∞Âá∫Âäõ

    const energyEl = document.getElementById('energy');
    if (energyEl) energyEl.textContent = data.energy.toFixed(1) + "%";

    const moodEl = document.getElementById('mood');
    if (moodEl) moodEl.textContent = data.mood || 'No Status';

    const followersEl = document.getElementById('followers');
    if (followersEl) followersEl.textContent = data.dailyStats.followers;

    const likesEl = document.getElementById('likes');
    if (likesEl) likesEl.textContent = data.dailyStats.likes;

    const affirmationCountEl = document.getElementById('affirmationCount');
    if (affirmationCountEl) affirmationCountEl.textContent = data.dailyStats.affirmationCount;

    const uniqueAffirmationUserCountEl = document.getElementById('uniqueAffirmationUserCount');
    if (uniqueAffirmationUserCountEl) uniqueAffirmationUserCountEl.textContent = data.dailyStats.uniqueAffirmationUserCount;

    const fortuneEl = document.getElementById('fortune');
    if (fortuneEl) fortuneEl.textContent = data.dailyStats.fortune;

    const cheerEl = document.getElementById('cheer');
    if (cheerEl) cheerEl.textContent = data.dailyStats.cheer;

    const analysisEl = document.getElementById('analysis');
    if (analysisEl) analysisEl.textContent = data.dailyStats.analysis;

    const djEl = document.getElementById('dj');
    if (djEl) djEl.textContent = data.dailyStats.dj;

    const anniversaryEl = document.getElementById('anniversary');
    if (anniversaryEl) anniversaryEl.textContent = data.dailyStats.anniversary;

    const answerEl = document.getElementById('answer');
    if (answerEl) answerEl.textContent = data.dailyStats.answer;

    const rpdEl = document.getElementById('rpd');
    if (rpdEl) rpdEl.textContent = data.dailyStats.rpd;

    const dailyCommentEl = document.getElementById('daily-comment');
    if (dailyCommentEl) dailyCommentEl.textContent = data.dailyStats.botComment;

    // --- New logic for lang chart ---
    const langData = data.dailyStats.lang;
    const langChartEl = document.getElementById('lang-chart') as HTMLCanvasElement;

    if (langData && langChartEl) {
      const labels = langData.map((item: [string, number]) => item[0]);
      const values = langData.map((item: [string, number]) => item[1]);

      if (langChart) {
        langChart.data.labels = labels;
        langChart.data.datasets[0].data = values;
        langChart.update();
      } else {
        langChart = new Chart(langChartEl, {
          type: 'pie',
          data: {
            labels: labels,
            datasets: [{
              data: values,
              hoverOffset: 4
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: 'top',
              },
              title: {
                display: false,
                text: '‰ΩøÁî®Ë®ÄË™û'
              }
            }
          }
        });
      }
    }
    // --- End of new logic for lang chart ---

    // --- New logic for speeds ---
    const likesSpeedEl = document.getElementById('likes-speed');
    const affirmationSpeedEl = document.getElementById('affirmation-speed');

    // Check if lastInitializedDate is available in the data
    if (data.dailyStats && data.dailyStats.lastInitializedDate && likesEl && affirmationCountEl && likesSpeedEl && affirmationSpeedEl) {
        const now = new Date();
        const lastInitializedDate = new Date(data.dailyStats.lastInitializedDate);
        const timeDifferenceInSeconds = (now.getTime() - lastInitializedDate.getTime()) / 1000;

        if (timeDifferenceInSeconds > 0) {
            const likesPerMinute = (data.dailyStats.likes / timeDifferenceInSeconds) * 60;
            const affirmationCountPerMinute = (data.dailyStats.affirmationCount / timeDifferenceInSeconds) * 60;

    if (likesSpeedEl) likesSpeedEl.textContent = likesPerMinute.toFixed(1);
    if (affirmationSpeedEl) affirmationSpeedEl.textContent = affirmationCountPerMinute.toFixed(1);
        } else {
            // Handle cases where time difference is zero or negative (should not happen with valid data)
            if (likesSpeedEl) likesSpeedEl.textContent = 'N/A';
            if (affirmationSpeedEl) affirmationSpeedEl.textContent = 'N/A';
        }
    } else {
        // If lastInitializedDate is not available or elements are missing, display placeholder
        if (likesSpeedEl) likesSpeedEl.textContent = '---';
        if (affirmationSpeedEl) affirmationSpeedEl.textContent = '---';
    }
    // --- End of new logic ---

    // --- New logic for bskyrate ---
    const bskyrateHourlyEl = document.getElementById('bskyrate-hourly');
    if (data.dailyStats && data.dailyStats.bskyrate && data.dailyStats.lastInitializedDate && bskyrateHourlyEl) {
        const now = new Date();
        const lastInitializedDate = new Date(data.dailyStats.lastInitializedDate);
        const timeDifferenceInSeconds = (now.getTime() - lastInitializedDate.getTime()) / 1000;

        if (timeDifferenceInSeconds > 0) {
            const bskyratePerHour = (data.dailyStats.bskyrate / timeDifferenceInSeconds) * 3600;
            if (bskyrateHourlyEl) bskyrateHourlyEl.textContent = bskyratePerHour.toFixed(1);
        } else {
            if (bskyrateHourlyEl) bskyrateHourlyEl.textContent = 'N/A';
        }
    } else {
        if (bskyrateHourlyEl) bskyrateHourlyEl.textContent = '---';
    }
    // --- End of new logic ---
  };

  function updateJSTTime() {
    const now = new Date();
    const jst = new Date(now.getTime() + (9 * 60 * 60 * 1000));
    const timeString = jst.toISOString().substr(11, 8);
    const jstTimeEl = document.getElementById('jst-time');
    if (jstTimeEl) jstTimeEl.textContent = timeString;
  }

  updateJSTTime();
  setInterval(updateJSTTime, 1000);
</script>
