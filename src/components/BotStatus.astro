---
import Post from './Post.astro';
---

<div class="bg-white rounded-lg">
  <h2 class="text-2xl font-bold mb-4 flex items-center">
    💖 Botたんのきもち (リアルタイム更新)
  </h2>
  <p class="text-gray-600 mb-4"><strong>現在時刻(JST):</strong> <span id="jst-time">--:--:--</span></p>

  <div class="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">元気</p>
      <p id="energy" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">増えたフォロワー</p>
      <p id="followers" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">いいねされた回数</p>
      <p id="likes" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">いいねされ速度 (毎分)</p>
      <p id="likes-speed" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">全肯定した回数</p>
      <p id="affirmationCount" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">全肯定速度 (毎分)</p>
      <p id="affirmation-speed" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">全肯定した人数</p>
      <p id="uniqueAffirmationUserCount" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">占った回数</p>
      <p id="fortune" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">応援した回数</p>
      <p id="cheer" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">分析した回数</p>
      <p id="analysis" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">DJした回数</p>
      <p id="dj" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">記念日お祝い回数</p>
      <p id="anniversary" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">質問コーナー回答数</p>
      <p id="answer" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">Rate Limit Point (毎時)</p>
      <p id="bskyrate-hourly" class="text-xl font-bold text-blue-600">---</p>
    </div>
    <div class="bg-gray-100 p-3 rounded-lg text-center">
      <p class="font-semibold text-gray-700">AI Request数</p>
      <p id="rpd" class="text-xl font-bold text-blue-600">---</p>
    </div>
  </div>
  <div class="bg-gray-100 p-3 rounded-lg text-center mb-4">
    <p class="font-semibold text-gray-700 mb-2">フォロワーの使用言語</p>
    <canvas id="lang-chart"></canvas>
  </div>
  <div id="mood-container" class="bg-gray-100 p-3 rounded-lg text-center cursor-pointer">
    <p class="font-semibold text-gray-700">今の気分</p>
    <p id="mood" class="text-xl font-bold text-blue-600">---</p>
  </div>

  <!-- Image Modal -->
  <div id="image-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-4 rounded-lg relative">
      <button id="close-modal" class="absolute top-2 right-2 text-gray-500 hover:text-gray-800 text-2xl">&times;</button>
      <img src="https://bot-tan.suibari.com/image.png" alt="Bot-tan Mood Image" class="max-w-full max-h-[80vh] rounded">
    </div>
  </div>

  <div>
    <h3 class="text-xl font-bold my-2">いちおしポスト</h3>
    <div id="top-post-container">
      <p id="top-post-text">---</p>
    </div>
    <div class=" bg-gray-100 p-3 rounded-lg text-center mt-4">
      <p class="font-semibold text-gray-700">botたんのコメント:</p>
      <p id="daily-comment" class="text-xl font-bold text-blue-600">---</p>
    </div>
  </div>
</div>

<script>
  import type { Props } from "./Post.astro";
  import { AtpAgent } from '@atproto/api';
  import Chart from 'chart.js/auto'; // Chart.jsをインポート
  
  // 認証不要の公開APIエンドポイントを指定
  const agent = new AtpAgent({ service: 'https://public.api.bsky.app' });

  let langChart: Chart | null = null; // Chartインスタンスを保持する変数
  let lastTopPostUri: string | null = null; // 前回のtopPostのURIを保持する変数
  
  // Postコンポーネントを動的に生成するためのテンプレート
  const createPostComponent = (post: Props) => `
    <article class="border border-gray-300 rounded-lg p-4 bg-gray-50 transition-shadow duration-300 hover:shadow-md">
      <a href="${post.link}" target="_blank" rel="noopener noreferrer" class="block text-inherit">
        <div class="flex flex-col">
          <div class="flex items-center space-x-4">
            ${post.image ? `<img src="${post.image}" alt="Bluesky Post Image" class="w-12 h-12 rounded-md" />` : ''}
            <p class="text-base text-gray-800">${post.text}</p>
          </div>
          <time class="mt-2 text-sm text-gray-500 self-end">
            ${new Date(post.date).toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo', hour12: false })}
          </time>
        </div>
      </a>
    </article>
  `;

  const socket = new WebSocket(`wss://bot-tan.suibari.com/ws`);

  socket.onmessage = async (event) => {
    const data = JSON.parse(event.data);
    console.log('Received data:', data); // データ構造を確認するためにログ出力

    const energyEl = document.getElementById('energy');
    if (energyEl) energyEl.textContent = data.energy.toFixed(1) + "%";

    const moodEl = document.getElementById('mood');
    if (moodEl) moodEl.textContent = data.mood || 'No Status';

    const followersEl = document.getElementById('followers');
    if (followersEl) followersEl.textContent = data.dailyStats.followers;

    const likesEl = document.getElementById('likes');
    if (likesEl) likesEl.textContent = data.dailyStats.likes;

    const affirmationCountEl = document.getElementById('affirmationCount');
    if (affirmationCountEl) affirmationCountEl.textContent = data.dailyStats.affirmationCount;

    const uniqueAffirmationUserCountEl = document.getElementById('uniqueAffirmationUserCount');
    if (uniqueAffirmationUserCountEl) uniqueAffirmationUserCountEl.textContent = data.dailyStats.uniqueAffirmationUserCount;

    const fortuneEl = document.getElementById('fortune');
    if (fortuneEl) fortuneEl.textContent = data.dailyStats.fortune;

    const cheerEl = document.getElementById('cheer');
    if (cheerEl) cheerEl.textContent = data.dailyStats.cheer;

    const analysisEl = document.getElementById('analysis');
    if (analysisEl) analysisEl.textContent = data.dailyStats.analysis;

    const djEl = document.getElementById('dj');
    if (djEl) djEl.textContent = data.dailyStats.dj;

    const anniversaryEl = document.getElementById('anniversary');
    if (anniversaryEl) anniversaryEl.textContent = data.dailyStats.anniversary;

    const answerEl = document.getElementById('answer');
    if (answerEl) answerEl.textContent = data.dailyStats.answer;

    const rpdEl = document.getElementById('rpd');
    if (rpdEl) rpdEl.textContent = data.dailyStats.rpd;

    const dailyCommentEl = document.getElementById('daily-comment');
    if (dailyCommentEl) dailyCommentEl.textContent = data.dailyStats.botComment;

    // --- New logic for lang chart ---
    const langData = data.dailyStats.lang;
    const langChartEl = document.getElementById('lang-chart') as HTMLCanvasElement;

    if (langData && langChartEl) {
      const labels = langData.map((item: [string, number]) => item[0]);
      const values = langData.map((item: [string, number]) => item[1]);

      if (langChart) {
        langChart.data.labels = labels;
        langChart.data.datasets[0].data = values;
        langChart.update();
      } else {
        langChart = new Chart(langChartEl, {
          type: 'pie',
          data: {
            labels: labels,
            datasets: [{
              data: values,
              backgroundColor: [
                '#FF6384',
                '#36A2EB',
                '#FFCE56',
                '#4BC0C0',
                '#9966FF',
                '#FF9F40'
              ],
              hoverOffset: 4
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: 'top',
              },
              title: {
                display: false,
                text: '使用言語'
              }
            }
          }
        });
      }
    }
    // --- End of new logic for lang chart ---

    // --- New logic for speeds ---
    const likesSpeedEl = document.getElementById('likes-speed');
    const affirmationSpeedEl = document.getElementById('affirmation-speed');

    // Check if lastInitializedDate is available in the data
    if (data.dailyStats && data.dailyStats.lastInitializedDate && likesEl && affirmationCountEl && likesSpeedEl && affirmationSpeedEl) {
        const now = new Date();
        const lastInitializedDate = new Date(data.dailyStats.lastInitializedDate);
        const timeDifferenceInSeconds = (now.getTime() - lastInitializedDate.getTime()) / 1000;

        if (timeDifferenceInSeconds > 0) {
            const likesPerMinute = (data.dailyStats.likes / timeDifferenceInSeconds) * 60;
            const affirmationCountPerMinute = (data.dailyStats.affirmationCount / timeDifferenceInSeconds) * 60;

    if (likesSpeedEl) likesSpeedEl.textContent = likesPerMinute.toFixed(1);
    if (affirmationSpeedEl) affirmationSpeedEl.textContent = affirmationCountPerMinute.toFixed(1);
        } else {
            // Handle cases where time difference is zero or negative (should not happen with valid data)
            if (likesSpeedEl) likesSpeedEl.textContent = 'N/A';
            if (affirmationSpeedEl) affirmationSpeedEl.textContent = 'N/A';
        }
    } else {
        // If lastInitializedDate is not available or elements are missing, display placeholder
        if (likesSpeedEl) likesSpeedEl.textContent = '---';
        if (affirmationSpeedEl) affirmationSpeedEl.textContent = '---';
    }
    // --- End of new logic ---

    // --- New logic for bskyrate ---
    const bskyrateHourlyEl = document.getElementById('bskyrate-hourly');
    if (data.dailyStats && data.dailyStats.bskyrate && data.dailyStats.lastInitializedDate && bskyrateHourlyEl) {
        const now = new Date();
        const lastInitializedDate = new Date(data.dailyStats.lastInitializedDate);
        const timeDifferenceInSeconds = (now.getTime() - lastInitializedDate.getTime()) / 1000;

        if (timeDifferenceInSeconds > 0) {
            const bskyratePerHour = (data.dailyStats.bskyrate / timeDifferenceInSeconds) * 3600;
            if (bskyrateHourlyEl) bskyrateHourlyEl.textContent = bskyratePerHour.toFixed(1);
        } else {
            if (bskyrateHourlyEl) bskyrateHourlyEl.textContent = 'N/A';
        }
    } else {
        if (bskyrateHourlyEl) bskyrateHourlyEl.textContent = '---';
    }
    // --- End of new logic ---

    const topPostContainer = document.getElementById('top-post-container');
    if (topPostContainer && data.dailyStats.topPost) {
      // topPostのURIが変更された場合のみフェッチ
      if (data.dailyStats.topPost !== lastTopPostUri) {
        try {
          const { data: postData } = await agent.getPosts({ uris: [data.dailyStats.topPost] });

          if (!postData.posts || postData.posts.length === 0) {
            throw new Error('Post not found');
          }
          const post = postData.posts[0];
          
          // Blueskyの投稿データから必要な情報を抽出
          const postValue = post.record as any;
          const postText = postValue?.text || 'テキストが取得できませんでした';
          const postDate = postValue?.createdAt || new Date().toISOString();
          const postLink = `https://bsky.app/profile/${post.author.handle}/post/${post.uri.split('/').pop()}`;
          const authorIcon = post.author.avatar;

          topPostContainer.innerHTML = createPostComponent({
            text: postText,
            image: authorIcon, // 投稿者のアイコンを使用
            date: postDate,
            link: postLink
          });
          lastTopPostUri = data.dailyStats.topPost; // URIを更新
        } catch (error) {
          console.error('Failed to fetch post from Bluesky:', error);
          topPostContainer.innerHTML = `<p id="top-post-text">投稿の取得に失敗しました。</p>`;
        }
      }
    } else if (topPostContainer) {
      topPostContainer.innerHTML = `<p id="top-post-text">---</p>`;
      lastTopPostUri = null; // topPostがない場合はURIをリセット
    }
  };

  function updateJSTTime() {
    const now = new Date();
    const jst = new Date(now.getTime() + (9 * 60 * 60 * 1000));
    const timeString = jst.toISOString().substr(11, 8);
    const jstTimeEl = document.getElementById('jst-time');
    if (jstTimeEl) jstTimeEl.textContent = timeString;
  }

  updateJSTTime();
  setInterval(updateJSTTime, 1000);

  // Modal script
  const moodContainer = document.getElementById('mood-container');
  const imageModal = document.getElementById('image-modal');
  const closeModal = document.getElementById('close-modal');

  if (moodContainer && imageModal && closeModal) {
    moodContainer.addEventListener('click', () => {
      imageModal.classList.remove('hidden');
    });

    closeModal.addEventListener('click', () => {
      imageModal.classList.add('hidden');
    });

    imageModal.addEventListener('click', (event) => {
      // Close modal if the background is clicked
      if (event.target === imageModal) {
        imageModal.classList.add('hidden');
      }
    });
  }
</script>
